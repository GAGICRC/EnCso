<?phprequire_once('./../../global.php');require_once TEMPLATE_PATH.'/site/helper/format.php'; // for formatCount$slug = Filter::text($_GET['slug']);	// check project$project = Project::getProjectFromSlug($slug);if($project == null) {	Session::setMessage('That project does not exist.');	header('Location: '.Url::error());	exit();}// get action so we know what to do$action = Filter::text($_POST['action']);// --- BAN USER --- //if($action == 'ban') {	// get user	$userID = Filter::numeric($_POST['userID']);	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// ban the user	$pu->setRelationship(ProjectUser::BANNED);	$pu->setTrusted(ProjectUser::UNTRUSTED);	$pu->save();	// log it	$logEvent = new Event(array(		'event_type_id' => 'ban_user',		'project_id' => $project->getID(),		'user_1_id' => Session::getUserID(),		'user_2_id' => $userID	));	$logEvent->save();		// send notification email, if enabled	$u = User::load($userID);	if($u->getNotifyBannedProject()) {		// compose email		$body = "<p>".formatUserLink(Session::getUserID()).' banned you from the project '.formatProjectLink($project->getID()).'.</p>';					$email = array(			'to' => $u->getEmail(),			'subject' => '['.PIPELINE_NAME.'] Banned from the project '.formatTitle($project->getTitle()),			'message' => $body		);		// send email		Email::send($email);			}			// send us back	$user = User::load($userID);	Session::setMessage($user->getUsername().' is now banned.');	$json = array('success' => '1');	echo json_encode($json);// --- UNBAN USER --- //		} elseif($action == 'unban') {	// get user	$userID = Filter::numeric($_POST['userID']);	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// delete the project user	$pu->delete();		// log it	$logEvent = new Event(array(		'event_type_id' => 'unban_user',		'project_id' => $project->getID(),		'user_1_id' => Session::getUserID(),		'user_2_id' => $userID	));	$logEvent->save();			// send us back	$user = User::load($userID);	Session::setMessage($user->getUsername().' is no longer banned.');	$json = array('success' => '1');	echo json_encode($json);	// --- BAN USERS --- //	} elseif($action == 'ban-users') {	$banlist = Filter::text($_POST['banlist']);	$banlist = explode(',', $banlist);		// these arrays will hold valid users to ban	$users = array();		// first, make sure everyone in the list is valid	if(!empty($banlist)) {		foreach($banlist as $b) {			$b = trim($b);			if($b == '') continue; // skip blank			$user = User::loadByUsername($b);			if($user !== null) {				// user found				if($project->isBanned($user->getID())) {					// user is already banned					$json = array('error' => $user->getUsername().' is already banned from this project.');					exit(json_encode($json));				} else {					// add user to array					$users[] = $user;				}			} else {				// invalid user				$json = array('error' => '"'.$b.'" is not a valid username.');				exit(json_encode($json));								}		}	} else {		$json = array('error' => 'You must provide at least one username.');		exit(json_encode($json));			}		// now actually ban the validated users	foreach($users as $u) {			// get project user		$pu = ProjectUser::find($u->getID(), $project->getID());		// ban the user		$pu->setRelationship(ProjectUser::BANNED);		$pu->setTrusted(ProjectUser::UNTRUSTED);		$pu->save();		// log it		$logEvent = new Event(array(			'event_type_id' => 'ban_user',			'project_id' => $project->getID(),			'user_1_id' => Session::getUserID(),			'user_2_id' => $u->getID()		));		$logEvent->save();			// send notification email, if enabled		if($u->getNotifyBannedProject()) {			// compose email			$body = "<p>".formatUserLink(Session::getUserID()).' banned you from the project '.formatProjectLink($project->getID()).'.</p>';						$email = array(				'to' => $u->getEmail(),				'subject' => '['.PIPELINE_NAME.'] Banned from the project '.formatTitle($project->getTitle()),				'message' => $body			);			// send email			Email::send($email);				}	}		// send us back	$numBans = count($users);	Session::setMessage(formatCount($numBans,'user','users').' banned.');	$json = array('success' => '1');	echo json_encode($json);// --- UNFOLLOW --- //	} elseif($action == 'unfollow') {	// get user	$userID = Session::getUserID();	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// delete the project user	$pu->delete();		// log it	$logEvent = new Event(array(		'event_type_id' => 'unfollow_project',		'project_id' => $project->getID(),		'user_1_id' => $userID	));	$logEvent->save();			// send us back	Session::setMessage('You are no longer following this project.');	$json = array('success' => '1');	echo json_encode($json);		// --- FOLLOW --- //	} elseif($action == 'follow') {	// get user	$userID = Session::getUserID();	// make follower	$pu = new ProjectUser(array(		'user_id' => $userID,		'project_id' => $project->getID(),		'relationship' => ProjectUser::FOLLOWER,		'trusted' => ProjectUser::UNTRUSTED	));	$pu->save();		// log it	$logEvent = new Event(array(		'event_type_id' => 'follow_project',		'project_id' => $project->getID(),		'user_1_id' => $userID,		'data_1' => ProjectUser::UNTRUSTED	));	$logEvent->save();		// send us back	Session::setMessage('You are now following this project.');	$json = array('success' => '1');	echo json_encode($json);			// --- TRUST USER --- //	} elseif($action == 'trust') {	// get user	$userID = Filter::numeric($_POST['userID']);	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// trust the user	$pu->setTrusted(ProjectUser::TRUSTED);	$pu->save();	// log it	$logEvent = new Event(array(		'event_type_id' => 'trust_user',		'project_id' => $project->getID(),		'user_1_id' => Session::getUserID(),		'user_2_id' => $userID	));	$logEvent->save();		// send us back	$user = User::load($userID);	Session::setMessage($user->getUsername().' is now trusted.');	$json = array('success' => '1');	echo json_encode($json);	// --- UNTRUST USER --- //	} elseif($action == 'untrust') {	// get user	$userID = Filter::numeric($_POST['userID']);	// get project user	$pu = ProjectUser::find($userID, $project->getID());	// untrust the user	$pu->setTrusted(ProjectUser::UNTRUSTED);	$pu->save();	// log it	$logEvent = new Event(array(		'event_type_id' => 'untrust_user',		'project_id' => $project->getID(),		'user_1_id' => Session::getUserID(),		'user_2_id' => $userID	));	$logEvent->save();		// send us back	$user = User::load($userID);	Session::setMessage($user->getUsername().' is now untrusted.');	$json = array('success' => '1');	echo json_encode($json);	// --- INVITE FOLLOWERS --- //	} elseif($action == 'invite-followers') {	$invitees = Filter::text($_POST['invitees']);	$message = Filter::formattedText($_POST['message']);	$trusted = Filter::numeric($_POST['trusted']);	$invitees = explode(',', $invitees);		// these arrays will hold valid users and emails to invite	$users = array();	$emails = array();		// first, make sure everyone in the list is valid	if(!empty($invitees)) {		foreach($invitees as $i) {			$i = trim($i);			if($i == '') continue; // skip blank			if(filter_var($i, FILTER_VALIDATE_EMAIL)) {				// it's an email address				$user = User::loadByEmail($i);				if($user !== null) {					// user already registered with this email					if($project->isFollower($user->getID())) {						// user is already following						$json = array('error' => $user->getUsername().' ('.$i.') is already following this project.');						exit(json_encode($json));					} else {						// add user to array						$users[] = $user;					}								} else {					// email address not found					$emails[] = $i;				}			} else {				// it's a username				$user = User::loadByUsername($i);				if($user !== null) {					// user found					if($project->isFollower($user->getID())) {						// user is already following						$json = array('error' => $user->getUsername().' is already following this project.');						exit(json_encode($json));					} else {						// add user to array						$users[] = $user;					}				} else {					// invalid user					$json = array('error' => '"'.$i.'" is not a valid username or email address.');					exit(json_encode($json));									}			}		}	} else {		$json = array('error' => 'You must provide at least one username or email address.');		exit(json_encode($json));			}		// now actually invite the validated users/emails	foreach($users as $u) {		// send invitation		$invite = new Invitation(array(			'inviter_id' => Session::getUserID(),			'invitee_id' => $u->getID(),			'project_id' => $project->getID(),			'trusted' => $trusted,			'invitation_message' => $message		));		$invite->save();				// log event		$logEvent = new Event(array(			'event_type_id' => 'invite_follower_user',			'project_id' => $project->getID(),			'user_1_id' => Session::getUserID(),			'user_2_id' => $u->getID(),			'item_1_id' => $invite->getID(),			'data_1' => $message,			'data_2' => $trusted		));		$logEvent->save();				// send notification email, if enabled		$sendEmail = false;		if($u->getID() != Session::getUserID()) { // don't email yourself					if($u->getNotifyFollowProject()) { // follower notifications enabled				$sendEmail = true;			}		}				if($sendEmail) {			// compose email			$body = "<p>".formatUserLink(Session::getUserID()).' invited you to follow the project '.formatProjectLink($project->getID()).'.</p>';			if(!empty($message)) {				$body .= '<blockquote>'.formatInvitationMessage($message).'</blockquote>';			}			if($trusted) {				$body .= '<p>If you accept this invitation, you will be a <a href="'.Url::help().'">trusted user</a> in this project.</p>';			}						$body .= '<p>To respond to this invitation, log into '.PIPELINE_NAME.' and visit your <a href="'.Url::dashboard().'">dashboard</a>.</p>';			$email = array(				'to' => $u->getEmail(),				'subject' => '['.PIPELINE_NAME.'] Invitation to follow the project '.formatTitle($project->getTitle()),				'message' => $body			);			// send email			Email::send($email);				}	}		foreach($emails as $e) {		// generate code//		$code = sha1(microtime(true).mt_rand(10000,90000));		// send invitation		$invite = new Invitation(array(			'inviter_id' => Session::getUserID(),			'invitee_email' => $e,			'project_id' => $project->getID(),						'trusted' => $trusted,			'invitation_message' => $message		));		$invite->save();				// log event		$logEvent = new Event(array(			'event_type_id' => 'invite_follower_email',			'project_id' => $project->getID(),			'user_1_id' => Session::getUserID(),			'item_1_id' => $invite->getID(),			'data_1' => $e,			'data_2' => $message,			'data_3' => $trusted		));		$logEvent->save();						// compose email		$body = "<p>".formatUserLink(Session::getUserID()).' invited you to follow the project '.formatProjectLink($project->getID()).'.</p>';		if(!empty($message)) {			$body .= '<blockquote>'.formatInvitationMessage($message).'</blockquote>';		}		if($trusted) {			$body .= '<p>If you accept this invitation, you will be a <a href="'.Url::help().'">trusted user</a> in this project.</p>';		}				$body .= '<p>To respond to this invitation, <a href="'.Url::registerWithEmail($e).'">register</a> a free account on '.PIPELINE_NAME.' using this email address ('.$e.').</p>';		$email = array(			'to' => $e,			'subject' => '['.PIPELINE_NAME.'] Invitation to follow the project '.formatTitle($project->getTitle()),			'message' => $body		);		// send email		Email::send($email);	}		// send us back	$numInvitations = count($users) + count($emails);	Session::setMessage(formatCount($numInvitations,'invitation','invitations').' sent.');	$json = array('success' => '1');	echo json_encode($json);		} else {	$json = array('error' => 'Invalid action.');	exit(json_encode($json));	}// if( ($action == 'revoke-organizer') ||	// ($action == 'resign-organizer') ||	// ($action == 'make-organizer') ||	// ($action == 'ban') ||	// ($action == 'unban') ||	// ($action == 'unfollow') ) {	// // get user	// $userID = Filter::numeric($_POST['userID']);	// $user = User::load($userID);	// // get project user	// $pu = ProjectUser::find($userID, $project->getID());// }// if($action == 'unfollow') {	// // delete follow record	// if($pu != null) {		// $pu->delete();	// }	// // log it	// $logEvent = new Event(array(		// 'event_type_id' => 'unfollow_project',		// 'project_id' => $project->getID(),		// 'user_1_id' => Session::getUserID()	// ));	// $logEvent->save();		// // send us back	// Session::setMessage('You are no longer following this project.');	// $json = array('success' => '1');	// echo json_encode($json);	// } elseif($action == 'follow') {	// // make follower	// $pu = new ProjectUser(array(		// 'user_id' => Session::getUserID(),		// 'project_id' => $project->getID(),		// 'relationship' => ProjectUser::FOLLOWER	// ));	// $pu->save();		// // log it	// $logEvent = new Event(array(		// 'event_type_id' => 'follow_project',		// 'project_id' => $project->getID(),		// 'user_1_id' => Session::getUserID()	// ));	// $logEvent->save();		// // send us back	// Session::setMessage('You are now following this project.');	// $json = array('success' => '1');	// echo json_encode($json);	// } elseif($action == 'revoke-organizer') {	// if($pu != null) {		// $pu->delete();	// }	// // was this organizer leading any tasks?	// $tasks = Task::getByLeaderID($project->getID(), $userID);	// if($tasks != null) {		// foreach($tasks as $t) {			// // revert task leader to project creator			// $oldLeaderID = $t->getLeaderID();			// $newLeaderID = $project->getCreatorID();			// if($oldLeaderID != $newLeaderID) {				// // save it				// $t->setLeaderID($newLeaderID);				// $t->save();				// // log it				// $logEvent = new Event(array(					// 'event_type_id' => 'edit_task_leader',					// 'project_id' => $project->getID(),					// 'user_1_id' => Session::getUserID(),					// 'user_2_id' => $newLeaderID,					// 'item_1_id' => $t->getID(),					// 'data_1' => $oldLeaderID,					// 'data_2' => $newLeaderID				// ));				// $logEvent->save();			// }		// }	// }		// // log it	// $logEvent = new Event(array(		// 'event_type_id' => 'revoke_organizer',		// 'project_id' => $project->getID(),		// 'user_1_id' => Session::getUserID(),		// 'user_2_id' => $userID	// ));	// $logEvent->save();		// // send us back	// Session::setMessage($user->getUsername().' is no longer an organizer of this project.');	// $json = array('success' => '1');	// echo json_encode($json);// } elseif($action == 'resign-organizer') {	// if($pu != null) {		// $pu->delete();	// }	// // was this organizer leading any tasks?	// $tasks = Task::getByLeaderID($project->getID(), $userID);	// if($tasks != null) {		// foreach($tasks as $t) {			// // revert task leader to project creator			// $oldLeaderID = $t->getLeaderID();			// $newLeaderID = $project->getCreatorID();			// if($oldLeaderID != $newLeaderID) {				// // save it				// $t->setLeaderID($newLeaderID);				// $t->save();				// // log it				// $logEvent = new Event(array(					// 'event_type_id' => 'edit_task_leader',					// 'project_id' => $project->getID(),					// 'user_1_id' => Session::getUserID(),					// 'user_2_id' => $newLeaderID,					// 'item_1_id' => $t->getID(),					// 'data_1' => $oldLeaderID,					// 'data_2' => $newLeaderID				// ));				// $logEvent->save();			// }		// }	// }		// // log it	// $logEvent = new Event(array(		// 'event_type_id' => 'resign_organizer',		// 'project_id' => $project->getID(),		// 'user_1_id' => Session::getUserID()	// ));	// $logEvent->save();		// // send us back	// Session::setMessage('You are no longer an organizer of this project.');	// $json = array('success' => '1');	// echo json_encode($json);// } elseif($action == 'make-organizer') {	// if($pu != null) {		// $pu->setRelationship(ProjectUser::ORGANIZER);	// } else {		// $pu = new ProjectUser(array(			// 'user_id' => $userID,			// 'project_id' => $project->getID(),			// 'relationship' => ProjectUser::ORGANIZER		// ));	// }	// $pu->save();		// // log it	// $logEvent = new Event(array(		// 'event_type_id' => 'make_organizer',		// 'project_id' => $project->getID(),		// 'user_1_id' => Session::getUserID(),		// 'user_2_id' => $userID	// ));	// $logEvent->save();			// // send us back	// Session::setMessage($user->getUsername().' is now an organizer.');	// $json = array('success' => '1');	// echo json_encode($json);// } elseif($action == 'ban') {	// if($pu != null) {		// $pu->setRelationship(ProjectUser::BANNED);	// } else {		// $pu = new ProjectUser(array(			// 'user_id' => $userID,			// 'project_id' => $project->getID(),			// 'relationship' => ProjectUser::BANNED		// ));	// }	// $pu->save();		// // log it	// $logEvent = new Event(array(		// 'event_type_id' => 'ban_user',		// 'project_id' => $project->getID(),		// 'user_1_id' => Session::getUserID(),		// 'user_2_id' => $userID	// ));	// $logEvent->save();			// // send us back	// Session::setMessage($user->getUsername().' is now banned.');	// $json = array('success' => '1');	// echo json_encode($json);// } elseif($action == 'unban') {	// if($pu != null) {		// $pu->delete();	// }		// // log it	// $logEvent = new Event(array(		// 'event_type_id' => 'unban_user',		// 'project_id' => $project->getID(),		// 'user_1_id' => Session::getUserID(),		// 'user_2_id' => $userID	// ));	// $logEvent->save();			// // send us back	// Session::setMessage($user->getUsername().' is no longer banned.');	// $json = array('success' => '1');	// echo json_encode($json);// } elseif( ($action == 'invite-organizers') ||	// ($action == 'invite-followers') ||	// ($action == 'invite-contributors') ){	// $invitees = Filter::text($_POST['invitees']);	// $message = Filter::formattedText($_POST['message']);	// $invitees = explode(',', $invitees);		// if($action == 'invite-organizers') {		// $taskID = null;		// $relationship = ProjectUser::ORGANIZER;		// $relationshipMsg = 'help organize';	// } elseif($action == 'invite-followers') {		// $taskID = null;		// $relationship = ProjectUser::FOLLOWER;		// $relationshipMsg = 'follow';	// } else {		// $taskID = Filter::numeric($_POST['taskID']);		// $task = Task::load($taskID);		// $relationship = ProjectUser::CONTRIBUTOR;		// $relationshipMsg = 'contribute to';		// }		// // these arrays will hold valid users and emails to invite	// $users = array();	// $emails = array();		// // first, make sure everyone in the list is valid	// if($invitees != null) {		// foreach($invitees as $i) {			// $i = trim($i);			// if($i == '') continue;			// if(filter_var($i, FILTER_VALIDATE_EMAIL)) {				// // it's an email address				// $user = User::loadByEmail($i);				// if($user != null) {					// // email address found; user exists					// if($validate === true) {						// $users[] = $user;					// } else {						// exit(json_encode($validate));					// }								// } else {					// // email address not found					// $emails[] = $i;				// }			// } else {				// $user = User::loadByUsername($i);				// if($user != null) {					// // make sure user is unaffiliated with this project					// $validate = validateUser($user, $project->getID());					// if($validate === true) {						// $users[] = $user;					// } else {						// exit(json_encode($validate));					// }				// } else {					// // invalid user					// $json = array('error' => '"'.$i.'" is not a valid username or email address.');					// exit(json_encode($json));									// }			// }		// }	// } else {		// $json = array('error' => 'You must provide at least one username or email address.');		// exit(json_encode($json));			// }		// // now actually invite the validated users/emails	// foreach($users as $u) {		// // send invitation		// $invite = new Invitation(array(			// 'inviter_id' => Session::getUserID(),			// 'invitee_id' => $u->getID(),			// 'project_id' => $project->getID(),			// 'task_id' => $taskID,			// 'relationship' => $relationship,			// 'invitation_message' => $message		// ));		// $invite->save();				// // log event		// if($relationship == ProjectUser::ORGANIZER) {			// $eventTypeID = 'invite_organizer_user';		// } elseif($relationship == ProjectUser::FOLLOWER) {			// $eventTypeID = 'invite_follower_user';		// } else {			// $eventTypeID = 'invite_contributor_user';		// }		// //$eventTypeID = ($relationship == ProjectUser::ORGANIZER) ? 'invite_organizer_user' : 'invite_follower_user';		// $logEvent = new Event(array(			// 'event_type_id' => $eventTypeID,			// 'project_id' => $project->getID(),			// 'user_1_id' => Session::getUserID(),			// 'user_2_id' => $u->getID(),			// 'item_1_id' => $invite->getID(),			// 'data_1' => $message,			// 'data_2' => $taskID		// ));		// $logEvent->save();				// // send notification email, if enabled		// $sendEmail = false;		// if($u->getID() != Session::getUserID()) { // don't email yourself					// if($relationship === ProjectUser::ORGANIZER) {				// if($u->getNotifyOrganizeProject()) {					// $sendEmail = true;				// }			// } elseif($relationship === ProjectUser::FOLLOWER) {				// if($u->getNotifyFollowProject()) {					// $sendEmail = true;				// }			// } else {				// if($u->getNotifyContributeProject()) {					// $sendEmail = true;				// }			// }		// }				// if($sendEmail) {			// // compose email			// if($relationship == ProjectUser::CONTRIBUTOR) {				// $msg = '<p>'.formatUserLink(Session::getUserID()).' invited you to contribute to the task <a href="'.Url::task($task->getID()).'">'.html_entity_decode($task->getTitle(), ENT_QUOTES, 'ISO-8859-15').'</a> in the project '.formatProjectLink($project->getID()).' on '.PIPELINE_NAME.'.</p>';			// } else {				// $msg = "<p>".formatUserLink(Session::getUserID()).' invited you to '.$relationshipMsg.' the project '.formatProjectLink($project->getID()).' on '.PIPELINE_NAME.'.</p>';			// }			// if($message != null) {				// $msg .= '<blockquote>'.html_entity_decode($message, ENT_QUOTES, 'ISO-8859-15').'</blockquote>';			// }			// $msg .= '<p>You can accept or decline this invitation on your <a href="'.Url::dashboard().'">Dashboard</a>.</p>';			// $email = array(				// 'to' => $u->getEmail(),				// 'subject' => 'Invitation to '.$relationshipMsg.' the project '.html_entity_decode($project->getTitle(), ENT_QUOTES, 'ISO-8859-15'),				// 'message' => $msg			// );			// // send email			// Email::send($email);				// }	// }		// foreach($emails as $e) {		// // generate code		// $code = sha1(microtime(true).mt_rand(10000,90000));		// // send invitation		// $invite = new Invitation(array(			// 'inviter_id' => Session::getUserID(),			// 'invitee_email' => $e,			// 'project_id' => $project->getID(),			// 'task_id' => $taskID,						// 'relationship' => $relationship,			// 'invitation_code' => $code,			// 'invitation_message' => $message		// ));		// $invite->save();				// // log event		// if($relationship == ProjectUser::ORGANIZER) {			// $eventTypeID = 'invite_organizer_email';		// } elseif($relationship == ProjectUser::FOLLOWER) {			// $eventTypeID = 'invite_follower_email';		// } else {			// $eventTypeID = 'invite_contributor_email';		// }				// //$eventTypeID = ($relationship == ProjectUser::ORGANIZER) ? 'invite_organizer_email' : 'invite_follower_email';		// $logEvent = new Event(array(			// 'event_type_id' => $eventTypeID,			// 'project_id' => $project->getID(),			// 'user_1_id' => Session::getUserID(),			// 'item_1_id' => $invite->getID(),			// 'data_1' => $e,			// 'data_2' => $message,			// 'data_3' => $taskID		// ));		// $logEvent->save();						// // compose email		// if($relationship == ProjectUser::CONTRIBUTOR) {			// $msg = '<p>'.formatUserLink(Session::getUserID()).' invited you to contribute to the task <a href="'.Url::task($task->getID()).'">'.html_entity_decode($task->getTitle(),ENT_QUOTES, 'ISO-8859-15').'</a> in the project '.formatProjectLink($project->getID()).' on '.PIPELINE_NAME.'.</p>';		// } else {					// $msg = "<p>".formatUserLink(Session::getUserID()).' invited you to '.$relationshipMsg.' the project '.formatProjectLink($project->getID()).' on '.PIPELINE_NAME.'.</p>';		// }		// if($message != null) {			// $msg .= '<blockquote>'.html_entity_decode($message, ENT_QUOTES, 'ISO-8859-15').'</blockquote>';		// }		// $msg .= '<p>Use the link above to learn more about the project. To accept this invitation, <a href="'.Url::registerWithCode($code).'"><b>click here</b></a> and follow the instructions for setting up your account.</p>';		// $email = array(			// 'to' => $e,			// 'subject' => 'Invitation to '.$relationshipMsg.' the project '.html_entity_decode($project->getTitle(), ENT_QUOTES, 'ISO-8859-15'),			// 'message' => $msg		// );		// // send email		// Email::send($email);	// }		// // send us back	// $numInvitations = count($users) + count($emails);	// Session::setMessage(formatCount($numInvitations,'invitation','invitations').' sent.');	// $json = array('success' => '1');	// echo json_encode($json);	// } elseif($action == 'new-bans') {	// $banlist = Filter::text($_POST['banlist']);	// $banlist = explode(',', $banlist);	// $numBanned = 0;	// if($banlist != null) {		// foreach($banlist as $b) {			// $b = trim($b);			// if($b == '') continue;			// $user = User::loadByUsername($b);			// if($user != null) {				// $sendEmail = false; // default off							// // make sure user can be banned				// if(ProjectUser::isCreator($user->getID(), $project->getID())) {					// // user is the project creator					// $json = array('error' => '"'.$user->getUsername().'" is the creator of this project and cannot be banned.');						// exit(json_encode($json));				// } elseif(ProjectUser::isOrganizer($user->getID(), $project->getID())) {					// // user is already an organizer					// $json = array('error' => '"'.$user->getUsername().'" is an organizer of this project and cannot be banned.');					// exit(json_encode($json));				// } elseif(ProjectUser::isContributor($user->getID(), $project->getID())) {					// // ban the user					// $pu = new ProjectUser(array(						// 'user_id' => $user->getID(),						// 'project_id' => $project->getID(),						// 'relationship' => ProjectUser::BANNED					// ));					// $pu->save();										// // log it					// $logEvent = new Event(array(						// 'event_type_id' => 'ban_user',						// 'project_id' => $project->getID(),						// 'user_1_id' => Session::getUserID(),						// 'user_2_id' => $user->getID()					// ));					// $logEvent->save();															// // send email notification?					// if($user->getNotifyBannedProject()) {						// $sendEmail = true;					// }														// $numBanned++;				// } elseif(ProjectUser::isFollower($user->getID(), $project->getID())) {					// // ban the user					// $pu = ProjectUser::find($user->getID(), $project->getID());					// $pu->setRelationship(ProjectUser::BANNED);					// $pu->save();														// // log it					// $logEvent = new Event(array(						// 'event_type_id' => 'ban_user',						// 'project_id' => $project->getID(),						// 'user_1_id' => Session::getUserID(),						// 'user_2_id' => $user->getID()					// ));					// $logEvent->save();										// // send email notification?					// if($user->getNotifyBannedProject()) {						// $sendEmail = true;					// }											// $numBanned++;						// } elseif(ProjectUser::isBanned($user->getID(), $project->getID())) {					// // user is banned					// $json = array('error' => '"'.$user->getUsername().'" is already banned from this project.');					// exit(json_encode($json));				// }								// // last but not least, send notification email				// if($sendEmail) {					// // compose email					// $msg = "<p>".formatUserLink(Session::getUserID()).' banned you from the project '.formatProjectLink($project->getID()).' on '.PIPELINE_NAME.'.</p>';					// $email = array(						// 'to' => $user->getEmail(),						// 'subject' => 'You were banned from the project '.html_entity_decode($project->getTitle(), ENT_QUOTES, 'ISO-8859-15'),						// 'message' => $msg					// );					// // send email					// Email::send($email);					// }			// } else {				// // invalid user				// $json = array('error' => '"'.$b.'" is not a valid username.');				// exit(json_encode($json));								// }		// }				// // send us back		// Session::setMessage(formatCount($numBanned,'user','users').' banned.');		// $json = array('success' => '1');		// echo json_encode($json);			// } else {		// $json = array('error' => 'You must provide at least one username.');		// exit(json_encode($json));			// }// } else {	// $json = array('error' => 'Invalid action.');	// exit(json_encode($json));	// }// // this function makes sure this user is not already affiliated with this project// function validateUser($user=null, $projectID=null) {	// if( ($user === null) ||		// ($projectID === null) ) {		// return null;	// }		// $json = null;	// if(ProjectUser::isCreator($user->getID(), $projectID)) {		// // user is the project creator		// $json = array('error' => '"'.$user->getUsername().'" is the creator this project.');		// } elseif(ProjectUser::isOrganizer($user->getID(), $projectID)) {		// // user is already an organizer		// $json = array('error' => '"'.$user->getUsername().'" is an organizer of this project.');	// // } elseif(ProjectUser::isContributor($user->getID(), $projectID)) {		// // // user is banned		// // $json = array('error' => '"'.$user->getUsername().'" is a contributor to this project.');	// } elseif(ProjectUser::isFollower($user->getID(), $projectID)) {		// // user is already a follower		// $json = array('error' => '"'.$user->getUsername().'" is following this project.');	// } elseif(ProjectUser::isBanned($user->getID(), $projectID)) {		// // user is banned		// $json = array('error' => '"'.$user->getUsername().'" is banned from this project.');	// }		// if($json != null) {		// return $json;	// } else {		// return true;	// }// }