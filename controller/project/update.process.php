<?phprequire_once("../../global.php");$slug = Filter::text($_GET['slug']);$project = Project::getProjectFromSlug($slug);// kick us out if slug invalidif($project == null){	header('Location: '.Url::error());	exit();}// validate task$taskID = Filter::numeric($_GET['t']);$task = Task::load($taskID);if($task == null) {	$json = array('error' => 'That task does not exist.');	exit(json_encode($json));	}// validate update$updateID = Filter::numeric($_GET['u']);$update = Update::load($updateID);if($update == null) {	header('Location: '.Url::error());	exit();}// // validate username// $username = Filter::text($_GET['u']);// $user = User::loadByUsername($username);// // check if user has accepted task// $accepted = Accepted::getByUserID($user->getID(), $task->getID());// if($accepted == null) {	// $json = array('error' => 'That user has not accepted this task.');	// exit(json_encode($json));	// }// move onto POST variables$action = Filter::text($_POST['action']);if($action == 'create') {	// get new update and upload token	$title = Filter::text($_POST['txtTitle']);	$message = Filter::formattedText($_POST['txtMessage']);	// $token = Filter::alphanum($_POST['token']);		// title can't be empty	if($title == '') {		$json = array('error' => 'Your update title cannot be empty.');		exit(json_encode($json));		}		// update can't be empty	if($message == '') {		$json = array('error' => 'Your update message cannot be empty.');		exit(json_encode($json));		}		// create the update	$update = new Update(array(		'creator_id' => Session::getUserID(),		'accepted_id' => $accepted->getID(),		'project_id' => $project->getID(),		'title' => $title,		'message' => $message	));	$update->save();		// attach any uploads	// Upload::attachToItem(		// $token,		// Upload::TYPE_UPDATE,		// $update->getID(),		// $project->getID()	// );		// log it	$logEvent = new Event(array(		'event_type_id' => 'create_update',		'user_1_id' => Session::getUserID(),		'project_id' => $project->getID(),		'item_1_id' => $update->getID(),		'item_2_id' => $accepted->getID(),		'item_3_id' => $task->getID()	));	$logEvent->save();		// we're done here	Session::setMessage('You created a new update for this task.');	$json = array('success' => '1', 'successUrl' => Url::updates($accepted->getID()));	echo json_encode($json);	} elseif($action == 'edit-status') {	// get new status	$status = Filter::numeric($_POST['status']);	// check if status is new	$oldStatus = $accepted->getStatus();	if($status != $oldStatus) {		// update status		$accepted->setStatus($status);		$accepted->save();		// log it		$logEvent = new Event(array(			'event_type_id' => 'edit_accepted_status',			'user_1_id' => Session::getUserID(),			'project_id' => $project->getID(),			'item_1_id' => $accepted->getID(),			'item_2_id' => $task->getID(),			'data_1' => $oldStatus,			'data_2' => $status		));		$logEvent->save();		// send us back		Session::setMessage('You edited the status for these updates.');		$json = array('success' => '1');		echo json_encode($json);			} else {	$json = array('error' => 'No changes were detected.');	exit(json_encode($json));			}} elseif($action == 'edit-update') {	// get update	$updateID = Filter::numeric($_POST['updateID']);	$update = Update::load($updateID);	if($update == null) {		$json = array('error' => 'That update does not exist.');		exit(json_encode($json));			}	// get message	$message = Filter::formattedText($_POST['message']);	// check for changes	$oldMessage = $update->getMessage();	if($message != $oldMessage) {		// update the update		$update->setMessage($message);		$update->save();		// log it		$logEvent = new Event(array(			'event_type_id' => 'edit_update',			'user_1_id' => Session::getUserID(),			'project_id' => $project->getID(),			'item_1_id' => $update->getID(),			'item_2_id' => $accepted->getID(),			'item_3_id' => $task->getID(),			'data_1' => $oldMessage,			'data_2' => $message		));		$logEvent->save();				// send us back		Session::setMessage('You edited the update.');		$json = array('success' => '1');		echo json_encode($json);			} else {		$json = array('error' => 'No changes were detected.');		exit(json_encode($json));		}} elseif($action == 'comment') {	$message = Filter::formattedText($_POST['message']);	if($message == '') {		$json = array('error' => 'Your comment cannot be empty.');		exit(json_encode($json));			} else {		// post the comment		$comment = new Comment(array(			'creator_id' => Session::getUserID(),			'project_id' => $project->getID(),			'update_id' => $updateID,			'message' => $message		));		$comment->save();		// re-save now that we have an ID		$comment->setParentID($comment->getID());		$comment->save();				// log it		$logEvent = new Event(array(			'event_type_id' => 'create_update_comment',			'project_id' => $project->getID(),			'user_1_id' => Session::getUserID(),			'item_1_id' => $comment->getID(),			'item_2_id' => $updateID,			'data_1' => $message		));		$logEvent->save();				// send us back		Session::setMessage('You commented on this update.');		$json = array('success' => '1');		echo json_encode($json);	}} elseif($action == 'comment-reply') {	$commentID = Filter::numeric($_POST['commentID']);	$message = Filter::formattedText($_POST['message']);	if($message == '') {		$json = array('error' => 'Your reply cannot be empty.');		exit(json_encode($json));			} else {		// post the comment		$reply = new Comment(array(			'creator_id' => Session::getUserID(),			'project_id' => $project->getID(),			'update_id' => $updateID,			'parent_id' => $commentID,			'message' => $message		));		$reply->save();				// log it		$logEvent = new Event(array(			'event_type_id' => 'create_update_comment_reply',			'project_id' => $project->getID(),			'user_1_id' => Session::getUserID(),			'item_1_id' => $commentID,			'item_2_id' => $reply->getID(),			'item_3_id' => $updateID,			'data_1' => $message		));		$logEvent->save();				// send us back		Session::setMessage('You replied to a comment on this update.');		$json = array('success' => '1');		echo json_encode($json);	}	} else {	$json = array('error' => 'Action not recognized.');	exit(json_encode($json));	}