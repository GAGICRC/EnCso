<?phprequire_once("../../global.php");$slug = Filter::text($_GET['slug']);$filter = Filter::text($_GET['filter']);$project = Project::getProjectFromSlug($slug);// kick us out if slug invalidif($project == null){	header('Location: '.Url::error());	exit();}$projectID = $project->getID();//$discussions = Discussion::getActivityDiscussionsByProjectID($project->getID(), 5);define('EVENTS_PER_PAGE', 50); // allswitch($filter){	case "basics":		$events = Event::getBasicsEventsByProjectID($projectID, EVENTS_PER_PAGE);		$sparklineData = Event::getSparklineData($projectID, BASICS_ID);		break;	case "tasks":		$events = Event::getTasksEventsByProjectID($projectID, EVENTS_PER_PAGE);		$sparklineData = Event::getSparklineData($projectID, TASKS_ID);		break;	case "discussions":		$events = Event::getDiscussionsEventsByProjectID($projectID, EVENTS_PER_PAGE);		$sparklineData = Event::getSparklineData($projectID, DISCUSSIONS_ID);		break;	case "people":		$events = Event::getPeopleEventsByProjectID($projectID, EVENTS_PER_PAGE);		$sparklineData = Event::getSparklineData($projectID, PEOPLE_ID);		break;	case "all":	default:		$events = Event::getByProjectID($projectID, null, EVENTS_PER_PAGE);		$sparklineData = Event::getSparklineData($projectID);}$soup = new Soup();$soup->set('project', $project);$soup->set('filter', $filter);$soup->set('events', $events);$soup->set('sparklineData', $sparklineData);//$soup->set('discussions', $discussions);$soup->render('project/page/activity');